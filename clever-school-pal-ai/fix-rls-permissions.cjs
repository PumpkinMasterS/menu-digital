const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixRLSPermissions() {
  console.log('üîê Verificando e corrigindo permiss√µes RLS...');

  try {
    // 1. Testar acesso √†s tabelas principais
    console.log('\n1Ô∏è‚É£ Testando acesso √†s tabelas...');
    
    // Testar schools
    const { data: schoolsData, error: schoolsError } = await supabase
      .from('schools')
      .select('id, name')
      .limit(1);
    
    if (schoolsError) {
      console.log('‚ùå Erro ao acessar schools:', schoolsError.message);
    } else {
      console.log('‚úÖ Schools acess√≠vel');
    }

    // Testar chat_logs
    const { data: chatData, error: chatError } = await supabase
      .from('chat_logs')
      .select('id, created_at')
      .limit(1);
    
    if (chatError) {
      console.log('‚ùå Erro ao acessar chat_logs:', chatError.message);
      console.log('üí° Poss√≠vel problema: RLS muito restritivo ou tabela n√£o existe');
    } else {
      console.log('‚úÖ Chat_logs acess√≠vel');
    }

    // Testar pedagogical_tags
    const { data: tagsData, error: tagsError } = await supabase
      .from('pedagogical_tags')
      .select('id, name')
      .limit(1);
    
    if (tagsError) {
      console.log('‚ùå Erro ao acessar pedagogical_tags:', tagsError.message);
    } else {
      console.log('‚úÖ Pedagogical_tags acess√≠vel');
    }

    // 2. Testar auth.admin.listUsers
    console.log('\n2Ô∏è‚É£ Testando auth.admin.listUsers...');
    try {
      const { data: usersData, error: usersError } = await supabase.auth.admin.listUsers();
      
      if (usersError) {
        console.log('‚ùå Erro auth.admin.listUsers:', usersError.message);
        console.log('üí° Poss√≠vel causa: Service Role Key incorreta ou sem permiss√µes de admin');
      } else {
        console.log(`‚úÖ Auth admin funcional - ${usersData.users?.length || 0} usu√°rios encontrados`);
      }
    } catch (authError) {
      console.log('‚ùå Erro auth.admin.listUsers:', authError.message);
    }

    // 3. Verificar configura√ß√µes do projeto
    console.log('\n3Ô∏è‚É£ Verificando configura√ß√µes...');
    console.log('üîë Supabase URL:', supabaseUrl);
    console.log('üîë Service Key configurada:', supabaseServiceKey ? 'Sim' : 'N√£o');
    
    // 4. Sugest√µes de corre√ß√£o
    console.log('\nüîß INSTRU√á√ïES PARA CORRIGIR OS PROBLEMAS:');
    console.log('\n' + '='.repeat(60));
    
    console.log('\nüìã 1. CRIAR TABELA PEDAGOGICAL_TAGS:');
    console.log('   - Abra o Supabase Dashboard');
    console.log('   - V√° para SQL Editor');
    console.log('   - Execute o SQL fornecido anteriormente');
    
    console.log('\nüìã 2. CORRIGIR RLS PARA CHAT_LOGS:');
    console.log('   Execute este SQL no Supabase Dashboard:');
    console.log(`
-- Verificar se a tabela chat_logs existe
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' AND table_name = 'chat_logs';

-- Se existir, ajustar RLS
ALTER TABLE public.chat_logs ENABLE ROW LEVEL SECURITY;

-- Criar pol√≠tica mais permissiva para desenvolvimento
DROP POLICY IF EXISTS "Allow read access for authenticated users" ON public.chat_logs;
CREATE POLICY "Allow read access for authenticated users" ON public.chat_logs
  FOR SELECT USING (true); -- Temporariamente permissivo

-- Ou desabilitar RLS temporariamente para desenvolvimento
-- ALTER TABLE public.chat_logs DISABLE ROW LEVEL SECURITY;`);
    
    console.log('\nüìã 3. VERIFICAR SERVICE ROLE KEY:');
    console.log('   - No Supabase Dashboard, v√° para Settings > API');
    console.log('   - Copie a "service_role" key (n√£o a "anon" key)');
    console.log('   - Atualize SUPABASE_SERVICE_ROLE_KEY no .env');
    
    console.log('\nüìã 4. ALTERNATIVA PARA USERS (sem auth.admin):');
    console.log('   - Criar uma fun√ß√£o RPC personalizada');
    console.log('   - Ou usar uma tabela profiles separada');
    
    console.log('\n' + '='.repeat(60));
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

fixRLSPermissions();
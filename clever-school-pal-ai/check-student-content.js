#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = 'https://nsaodmuqjtabfblrrdqv.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5zYW9kbXVxanRhYmZibHJyZHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc2NTY3NjAsImV4cCI6MjA2MzIzMjc2MH0.UpuMCwfwPs33g8dG60DU0kXmJqu2DoVrhXvL0igRPyE';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function checkStudentContent() {
  console.log('üîç EduConnect - Diagn√≥stico de Conte√∫do');
  console.log('='.repeat(50));

  // 1. Check test student
  console.log('üë®‚Äçüéì Verificando estudante de teste...');
  const { data: student, error: studentError } = await supabase
    .from('students')
    .select(`
      id, 
      name, 
      phone_number,
      class_id, 
      school_id, 
      active,
      bot_active,
      classes(id, name, grade),
      schools(id, name)
    `)
    .eq('phone_number', '+351999999999')
    .single();

  if (studentError) {
    console.log('‚ùå Estudante de teste n√£o encontrado:', studentError.message);
    return;
  }

  console.log(`‚úÖ Estudante encontrado: ${student.name}`);
  console.log(`   üì± Telefone: ${student.phone_number}`);
  console.log(`   üè´ Escola: ${student.schools?.name} (${student.school_id})`);
  console.log(`   üìö Turma: ${student.classes?.name} (${student.classes?.grade}) - ID: ${student.class_id}`);
  console.log(`   ü§ñ Bot ativo: ${student.bot_active ? 'SIM' : 'N√ÉO'}`);

  // 2. Check content associations for this class
  console.log('\nüìù Verificando conte√∫dos associados √† turma...');
  const { data: contentAssocs, error: assocsError } = await supabase
    .from('content_classes')
    .select(`
      content_id,
      class_id,
      contents(
        id, 
        title, 
        description,
        status, 
        subject_id,
        embedding,
        subjects(name)
      )
    `)
    .eq('class_id', student.class_id);

  if (assocsError) {
    console.log('‚ùå Erro ao buscar associa√ß√µes:', assocsError.message);
    return;
  }

  console.log(`üìä Total de conte√∫dos associados: ${contentAssocs?.length || 0}`);
  
  if (contentAssocs?.length > 0) {
    contentAssocs.forEach((assoc, index) => {
      const content = assoc.contents;
      console.log(`   ${index + 1}. ${content.title}`);
      console.log(`      üìö Disciplina: ${content.subjects?.name || 'N/A'}`);
      console.log(`      üìã Status: ${content.status}`);
      console.log(`      üß† Embedding: ${content.embedding ? 'SIM' : 'N√ÉO'}`);
      console.log(`      üìù Descri√ß√£o: ${content.description?.substring(0, 80)}...`);
    });
  } else {
    console.log('   ‚ùå Nenhum conte√∫do associado a esta turma!');
  }

  // 3. Check all published content
  console.log('\nüìö Verificando todo conte√∫do publicado...');
  const { data: allContent, error: allContentError } = await supabase
    .from('contents')
    .select(`
      id,
      title,
      status,
      embedding,
      subjects(name),
      content_classes(class_id, classes(name, grade))
    `)
    .eq('status', 'publicado');

  if (allContentError) {
    console.log('‚ùå Erro ao buscar conte√∫do:', allContentError.message);
    return;
  }

  console.log(`üìä Total de conte√∫do publicado: ${allContent?.length || 0}`);
  allContent?.forEach((content, index) => {
    console.log(`   ${index + 1}. ${content.title} (${content.subjects?.name})`);
    console.log(`      üß† Embedding: ${content.embedding ? 'SIM' : 'N√ÉO'}`);
    console.log(`      üìö Turmas: ${content.content_classes?.map(cc => cc.classes?.name).join(', ') || 'Nenhuma'}`);
  });

  // 4. Test the search function manually
  console.log('\nüîç Testando busca manual...');
  const { data: searchResult, error: searchError } = await supabase
    .from('contents')
    .select(`
      id,
      title,
      description,
      content_data,
      content_type,
      subjects!inner(name, grade),
      content_classes!inner(
        classes!inner(id, name, grade)
      )
    `)
    .eq('status', 'publicado')
    .eq('content_classes.class_id', student.class_id);

  console.log(`üéØ Resultados da busca manual: ${searchResult?.length || 0}`);
  if (searchResult?.length > 0) {
    searchResult.forEach(result => {
      console.log(`   ‚úÖ ${result.title}`);
    });
  }

  console.log('\nüí° DIAGN√ìSTICO:');
  if (contentAssocs?.length === 0) {
    console.log('‚ùå PROBLEMA: N√£o h√° conte√∫do associado a esta turma!');
    console.log('   üîß SOLU√á√ÉO: Precisa criar conte√∫do e associar √† turma');
  } else if (contentAssocs?.some(c => !c.contents.embedding)) {
    console.log('‚ö†Ô∏è  PROBLEMA: Conte√∫do existe mas sem embeddings!');
    console.log('   üîß SOLU√á√ÉO: Precisa gerar embeddings para o conte√∫do');
  } else {
    console.log('‚úÖ Conte√∫do existe e tem embeddings - problema pode ser na fun√ß√£o de busca');
  }
}

checkStudentContent().catch(console.error); 
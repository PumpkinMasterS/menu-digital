import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { createHash } from "https://deno.land/std@0.168.0/node/crypto.ts"
import { createWebSearchTools } from '../shared/tools/index.ts'
import { createContextRegistry } from '../../shared/context-registry.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-api-key',
}

// Function to create a hash for caching
function createQuestionHash(question: string, classId: string): string {
  return createHash('sha256').update(`${question.toLowerCase().trim()}-${classId}`).digest('hex')
}

// Personalidade global e contextos passam a ser obtidos via Context Registry

// üåê FUN√á√ÉO PARA DETECTAR SE PRECISA DE WEB SEARCH
async function needsWebSearch(question: string): Promise<boolean> {
  const q = question.toLowerCase();
  // Sinais gerais de temporalidade/atualidade
  const keywordHits = [
    'hoje', 'agora', 'atual', 'recente', '√∫ltimo', 'nova', 'novo', 'not√≠cia',
    'aconteceu', 'acontece', 'est√° acontecendo', 'neste momento',
    '2024', '2025', 'este ano', 'ano passado', 'm√™s passado', 'semana passada',
    'ontem', 'amanh√£', 'pr√≥ximo', 'futuro',
    'presidente', 'primeiro-ministro', 'elei√ß√£o', 'governo', 'pol√≠tica', 'ministro',
    'mandato', 'posse', 'eleito', 'candidato', 'partido pol√≠tico', 'congresso',
    'senado', 'c√¢mara', 'deputado', 'senador',
    'pre√ßo', 'cota√ß√£o', 'valor', 'c√¢mbio', 'clima', 'tempo', 'temperatura',
    'popula√ß√£o', 'dados', 'estat√≠stica', 'n√∫mero', 'quantidade',
    'descoberta', 'inven√ß√£o', 'pesquisa', 'estudo', 'resultado', 'conclus√£o',
    'experimento', 'teste', 'an√°lise', 'relat√≥rio',
    'intelig√™ncia artificial', 'ia', 'tecnologia', 'inova√ß√£o', 'avan√ßo',
    'desenvolvimento', 'progresso', 'mudan√ßa', 'evolu√ß√£o',
    // Frases cr√≠ticas que mudam com o tempo
    'quem √© o presidente', 'presidente dos eua', 'presidente dos estados unidos',
    'presidente do brasil', 'presidente de portugal'
  ].some(k => q.includes(k));

  // Consultas sobre cargos/l√≠deres que mudam ao longo do tempo (sem precisar de "atual")
  const temporalEntity = (
    /\b(quem\s+√©|qual\s+√©)?\s*(o\s+)?(presidente|primeiro-ministro|ministro|l√≠der|governador|prefeito)\b.*\b(eua|estados\s+unidos|brasil|portugal|reino\s+unido|fran√ßa|espanha|alemanha)\b/i.test(q)
  ) || (/\bpresidente\b.*\b(eua|estados\s+unidos)\b/i.test(q));

  return keywordHits || temporalEntity;
}

// ‚úÖ NOVA FUN√á√ÉO: Detectar perguntas de atualidades (for√ßar busca fresca)
function isCurrentEventsQuery(question: string): boolean {
  const q = question.toLowerCase();
  const qn = q.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  const patterns = [
    /\b(hoje|agora|atual|recentemente|neste momento)\b/i,
    /\b(not√≠cias?|manchetes?|√∫ltimas?)\b/i,
    /\b(aconteceu|est√° acontecendo|acontece)\b/i,
    /\b(2024|2025|ontem|esta semana|este m√™s|semana passada|m√™s passado)\b/i,
    /\b(elei√ß√£o|posse|mandato|governo|presidente)\b/i
  ];
  const temporalEntity = (
    /\b(quem\s+√©|qual\s+√©)?\s*(o\s+)?(presidente|primeiro-ministro|ministro|l√≠der|governador|prefeito)\b.*\b(eua|estados\s+unidos|brasil|portugal|reino\s+unido|fran√ßa|espanha|alemanha)\b/i.test(q)
  ) || (/\bpresidente\b.*\b(eua|estados\s+unidos)\b/i.test(q));
  // Novo: toler√¢ncia a erros ortogr√°ficos (ex.: "presiudente") usando detec√ß√£o por radical
  const typoEntity = /\bpresid[a-z]*\b/i.test(qn) && /\b(eua|estados\s+unidos|usa|united\s+states)\b/i.test(qn);
  return patterns.some(p => p.test(q)) || temporalEntity || typoEntity;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const openRouterApiKey = Deno.env.get('OPENROUTER_API_KEY')!
    const openRouterBaseUrl = Deno.env.get('OPENROUTER_BASE_URL') || 'https://openrouter.ai/api/v1'
    const aiModel = Deno.env.get('AI_MODEL') || 'open-mistral-7b'
    const embeddingModel = Deno.env.get('EMBEDDING_MODEL') || 'mistral/mistral-embed'
    const internalApiKey = Deno.env.get('HUMANIZED_INTERNAL_API_KEY') || ''
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    if (req.method === 'POST') {
      const { phoneNumber, question, schoolId, streaming = false, messageType, imageUrl, includeImageGeneration = false } = await req.json()

      if (!phoneNumber || !question) {
        return new Response(
          JSON.stringify({ error: 'Phone number and question are required' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
      }

      console.log(`üì± Processing ${messageType || 'text'} message from ${phoneNumber}: ${question}`)
      if (imageUrl) {
        console.log(`üñºÔ∏è Received image: ${imageUrl}`)
      }

      // üéØ REGISTRY: Construir contexto hier√°rquico e obter personalidade global
      const { buildHierarchicalContext } = createContextRegistry(supabase)
      const hierarchicalContext = await buildHierarchicalContext({ whatsappNumber: phoneNumber, schoolId })
      const globalPersonality = hierarchicalContext?.global?.personality || null
      console.log('üé≠ Personalidade global (registry):', globalPersonality ? 'presente' : 'padr√£o')

      // Find student by phone number (using whatsapp_number)
      const { data: student, error: studentError } = await supabase
        .from('students')
        .select(`
          id,
          name,
          whatsapp_number,
          class_id,
          school_id,
          active,
          bot_active,
          classes!inner(
            id,
            name,
            grade,
            school_id
          )
        `)
        .eq('whatsapp_number', phoneNumber)
        .eq('active', true)
        .eq('bot_active', true)
        .single()

      if (studentError || !student) {
        return new Response(
          JSON.stringify({ 
            error: 'Student not found or bot not active for this number',
            canRespond: false 
          }),
          { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
      }

      // Verify school if provided
      if (schoolId && student.school_id !== schoolId) {
        return new Response(
          JSON.stringify({ 
            error: 'Student not from this school',
            canRespond: false 
          }),
          { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
      }

      console.log(`üîç DEBUG: Student class_id: ${student.class_id}`)
      console.log(`üîç DEBUG: Student grade: ${student.classes?.grade}`)

      // üåê MODERN WEB SEARCH: Usar tools nativas seguindo padr√µes 2025
      let webSearchContext = ''
      const isCurrent = isCurrentEventsQuery(question)
      const shouldUseWebSearch = (await needsWebSearch(question)) || isCurrent
      
      if (shouldUseWebSearch) {
        console.log('üîç Pergunta requer busca web, usando tools modernas...')
        try {
          const tools = createWebSearchTools()
          const searchResults = []
          
          // Determinar qual tool usar baseado no contexto da pergunta
          const questionLower = question.toLowerCase()
          
          // Para eventos atuais, priorizar NewsSearchTool
          if (isCurrent || questionLower.includes('not√≠cia') || questionLower.includes('atual')) {
            const newsTool = tools.find(t => t.name === 'news_search')
            if (newsTool) {
              const result = await newsTool._call({
                query: question,
                maxResults: 5,
                language: 'pt'
              })
              const parsedResult = JSON.parse(result)
              if (parsedResult.articles?.length > 0) {
                searchResults.push({
                  source: 'news',
                  data: parsedResult
                })
              }
            }
          }
          
          // Reordena√ß√£o e fallback: news‚Üíwikipedia‚Üíduckduckgo (ou wikipedia‚Üíduckduckgo)
           if (searchResults.length === 0) {
             const prioritized = isCurrent ? ['news_search','wikipedia_search','duckduckgo_search'] : ['wikipedia_search','duckduckgo_search']
             for (const name of prioritized) {
               const tool = tools.find(t => t.name === name)
               if (!tool) continue
               try {
                 if (name === 'news_search') {
                   const result = await tool._call({ query: question, maxResults: 5, language: 'pt' })
                   const parsed = JSON.parse(result)
                   if (parsed.articles?.length > 0) {
                     searchResults.push({ source: 'news', data: parsed })
                   }
                 } else if (name === 'wikipedia_search') {
                   const result = await tool._call({ query: question, maxResults: 2, language: 'pt' })
                   const parsed = JSON.parse(result)
                   if (parsed.results?.length > 0) {
                     searchResults.push({ source: 'wikipedia', data: parsed })
                   }
                 } else if (name === 'duckduckgo_search') {
                   const result = await tool._call({ query: question, maxResults: 5 })
                   const parsed = JSON.parse(result)
                   if (parsed.abstract || (Array.isArray(parsed.relatedTopics) && parsed.relatedTopics.length > 0)) {
                     searchResults.push({ source: 'duckduckgo', data: parsed })
                   }
                 }
               } catch (e) {
                 console.warn(`Tool ${name} falhou:`, (e as any)?.message || e)
               }
               if (searchResults.length > 0) break
             }
           }
          
          // Formatar resultados para o contexto
          if (searchResults.length > 0) {
            webSearchContext = '\n\nüìö INFORMA√á√ïES ATUAIS DA WEB:\n'
            
            searchResults.forEach((result, index) => {
              if (result.source === 'news') {
                const data = result.data
                if (data.articles?.length > 0) {
                  webSearchContext += `\nüì∞ MANCHETES:\n`
                  data.articles.forEach((article: any, i: number) => {
                    webSearchContext += `${i + 1}. **${article.title}**\n   ${article.description || ''}\n   ${article.url ? `Link: ${article.url}` : ''}\n\n`
                  })
                }
              } else if (result.source === 'wikipedia') {
                const data = result.data
                webSearchContext += `\nüìñ WIKIPEDIA:\n`
                data.results.forEach((article: any, i: number) => {
                  webSearchContext += `${i + 1}. **${article.title}**\n   ${article.snippet}\n   Link: ${article.url}\n\n`
                })
              } else if (result.source === 'duckduckgo') {
                const data = result.data
                if (data.abstract) {
                  webSearchContext += `\nüîç INFORMA√á√ÉO GERAL:\n**${data.abstractSource}**\n${data.abstract}\n`
                  if (data.abstractURL) webSearchContext += `Link: ${data.abstractURL}\n`
                }
                if (data.relatedTopics?.length > 0) {
                  webSearchContext += `\nüìã T√ìPICOS RELACIONADOS:\n`
                  data.relatedTopics.forEach((topic: any, i: number) => {
                    webSearchContext += `${i + 1}. ${topic.text}\n   Link: ${topic.firstURL}\n\n`
                  })
                }
              }
            })
            
            console.log(`‚úÖ Modern web search: ${searchResults.length} tools utilizadas`)
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro na busca web moderna:', (error as any).message || error)
        }
      }

      // Check cache first for instant responses
      const questionHash = createQuestionHash(question + webSearchContext, student.class_id)
      const { data: cachedResponse } = await supabase
        .from('response_cache')
        .select('*')
        .eq('question_hash', questionHash)
        .eq('school_id', student.school_id)
        .eq('class_id', student.class_id)
        .single()

      if (cachedResponse) {
        console.log('üöÄ Cache hit! Returning instant response')
        
        // Update cache hit count and last used
        await supabase
          .from('response_cache')
          .update({ 
            hit_count: cachedResponse.hit_count + 1,
            last_used_at: new Date().toISOString()
          })
          .eq('id', cachedResponse.id)

        // Log the interaction
        await supabase
          .from('chat_logs')
          .insert({
            student_id: student.id,
            question: question,
            answer: cachedResponse.answer,
            relevant_content_count: 0,
            school_id: student.school_id,
            response_type: 'cache_hit'
          })

        return new Response(
          JSON.stringify({
            canRespond: true,
            answer: cachedResponse.answer,
            student: {
              id: student.id,
              name: student.name,
            },
            relevantContentCount: 0,
            searchType: 'cache_hit',
            cached: true,
            processingTime: 0,
            personalityActive: !!globalPersonality
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        )
      }

      const startTime = Date.now()

      // Generate embedding for the question using OpenRouter
      let questionEmbedding: number[] = []
      
      try {
        const embeddingResponse = await fetch(`${openRouterBaseUrl}/embeddings`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${openRouterApiKey}`,
          },
          body: JSON.stringify({
            model: embeddingModel,
            input: question,
          }),
        })

        if (embeddingResponse.ok) {
          const embeddingData = await embeddingResponse.json()
          questionEmbedding = embeddingData.data[0].embedding || []
          console.log('Successfully generated question embedding via OpenRouter, length:', questionEmbedding.length)
        } else {
          console.warn('OpenRouter embedding API returned status:', embeddingResponse.status)
          const errorText = await embeddingResponse.text()
          console.warn('Error details:', errorText)
        }
      } catch (err) {
        console.warn('Could not generate question embedding via OpenRouter:', err)
        console.log('Falling back to text search.')
      }

      // Find relevant content using SIMPLE and ROBUST search
      let relevantContent: any[] = []

      console.log(`üîç SIMPLE SEARCH: Starting for class_id: ${student.class_id}`)

      // Get ALL content for this class - SIMPLE approach
      const { data: classContent, error: classError } = await supabase
        .from('content_classes')
        .select(`
          contents(
            id, title, description, content_data, status, subjects(name)
          )
        `)
        .eq('class_id', student.class_id)

      if (!classError && classContent) {
        // Get only published content
        const published = classContent
          .map(cc => cc.contents)
          .filter(c => c && c.status === 'publicado')

        console.log(`üìö Published content found: ${published.length}`)

        if (published.length > 0) {
          // Simple text search
          const searchTerms = question.toLowerCase().split(' ').filter(term => term.length > 2)
          
          relevantContent = published.filter(content => {
            const contentText = `${content.title} ${content.description || ''} ${content.content_data}`.toLowerCase()
            return searchTerms.some(term => contentText.includes(term))
          }).slice(0, 3)

          console.log(`üéØ Relevant content after text search: ${relevantContent.length}`)
        }
      }

      // If no relevant content found, get some general content
      if (relevantContent.length === 0 && classContent && classContent.length > 0) {
        relevantContent = classContent
          .map(cc => cc.contents)
          .filter(c => c && c.status === 'publicado')
          .slice(0, 2)
        
        console.log(`üìñ Using general content: ${relevantContent.length}`)
      }

      const processingTime = Date.now() - startTime

      // üéØ CHAMAR HUMANIZED-AI-TUTOR COM PERSONALIDADE GLOBAL
      console.log('ü§ñ Calling advanced AI tutor with global personality...')
      
      const aiResponse = await fetch(`${supabaseUrl}/functions/v1/humanized-ai-tutor`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Security hardening: use internal x-api-key instead of Service Role in Authorization
          ...(internalApiKey ? { 'x-api-key': internalApiKey } : {})
        },
        body: JSON.stringify({
          phoneNumber: phoneNumber,
          question: question,
          studentId: student.id,
          customPersonality: globalPersonality, // üéØ PASSAR PERSONALIDADE GLOBAL
          messageType: messageType,
          imageUrl: imageUrl,
          webSearchContext: webSearchContext, // üåê PASSAR CONTEXTO WEB
          relevantContent: relevantContent, // üìö PASSAR CONTE√öDO RELEVANTE
          hierarchicalContext: hierarchicalContext // üß≠ NOVO: Passar contexto hier√°rquico completo
        }),
      })

      if (!aiResponse.ok) {
        throw new Error(`AI tutor failed: ${aiResponse.status}`)
      }

      const aiData = await aiResponse.json()

      // Cache the response for future use
      if (aiData.canRespond && aiData.answer) {
        try {
          await supabase
            .from('response_cache')
            .insert({
              question_hash: questionHash,
              question: question,
              answer: aiData.answer,
              school_id: student.school_id,
              class_id: student.class_id,
              hit_count: 0,
              created_at: new Date().toISOString(),
              last_used_at: new Date().toISOString()
            })
        } catch (cacheError) {
          console.warn('Could not cache response:', cacheError)
        }
      }

      return new Response(
        JSON.stringify({
          ...aiData,
          relevantContentCount: relevantContent.length,
          searchType: 'hierarchical_with_personality',
          cached: false,
          processingTime: processingTime,
          personalityActive: !!globalPersonality,
          personalitySource: 'registry'
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    return new Response('Method not supported', { 
      status: 405, 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    })

  } catch (error) {
    console.error('Error in ai-query:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error', 
        details: error.message,
        canRespond: false 
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
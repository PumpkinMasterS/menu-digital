// Setup basic data and insert educational content
import { createClient } from '@supabase/supabase-js';

// Supabase configuration
const supabaseUrl = 'https://nsaodmuqjtabfblrrdqv.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5zYW9kbXVxanRhYmZibHJyZHF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc2NTY3NjAsImV4cCI6MjA2MzIzMjc2MH0.UpuMCwfwPs33g8dG60DU0kXmJqu2DoVrhXvL0igRPyE';

const supabase = createClient(supabaseUrl, supabaseKey);

async function setupBasicData() {
  console.log('üöÄ Setting up basic school data...');

  // 1. Check if school exists
  let { data: schools } = await supabase.from('schools').select('id, name').limit(1);
  
  let schoolId;
  if (!schools?.length) {
    console.log('üè´ Creating school...');
    const { data: newSchool, error } = await supabase
      .from('schools')
      .insert({
        name: 'Escola Teste EduConnect',
        address: 'Rua da Educa√ß√£o, 123',
        phone: '+351234567890',
        email: 'contato@escola.edu',
        settings: {
          ai_enabled: true,
          max_students: 1000
        }
      })
      .select('id')
      .single();
    
    if (error) {
      console.error('‚ùå Error creating school:', error);
      return;
    }
    schoolId = newSchool.id;
    console.log(`‚úÖ School created with ID: ${schoolId}`);
  } else {
    schoolId = schools[0].id;
    console.log(`‚úÖ Using existing school: ${schools[0].name} (${schoolId})`);
  }

  // 2. Check and create subjects
  const requiredSubjects = ['Matem√°tica', 'Portugu√™s', 'Ci√™ncias'];
  const { data: existingSubjects } = await supabase.from('subjects').select('id, name');
  
  const subjectIds = {};
  for (const subjectName of requiredSubjects) {
    let subject = existingSubjects?.find(s => s.name === subjectName);
    
    if (!subject) {
      console.log(`üìò Creating subject: ${subjectName}`);
      const { data: newSubject, error } = await supabase
        .from('subjects')
        .insert({
          name: subjectName,
          description: `Disciplina de ${subjectName} para ensino fundamental`,
          school_id: schoolId
        })
        .select('id, name')
        .single();
      
      if (error) {
        console.error(`‚ùå Error creating subject ${subjectName}:`, error);
        continue;
      }
      subject = newSubject;
      console.log(`‚úÖ Subject ${subjectName} created`);
    } else {
      console.log(`‚úÖ Using existing subject: ${subjectName}`);
    }
    
    subjectIds[subjectName] = subject.id;
  }

  // 3. Check and create class
  let { data: classes } = await supabase.from('classes').select('id, grade').eq('grade', '9¬∫ ano');
  
  let classId;
  if (!classes?.length) {
    console.log('üéì Creating 9¬∫ ano class...');
    const { data: newClass, error } = await supabase
      .from('classes')
      .insert({
        name: '9¬∫ A',
        grade: '9¬∫ ano',
        school_year: '2024',
        school_id: schoolId
      })
      .select('id')
      .single();
    
    if (error) {
      console.error('‚ùå Error creating class:', error);
    } else {
      classId = newClass.id;
      console.log(`‚úÖ Class created with ID: ${classId}`);
    }
  } else {
    classId = classes[0].id;
    console.log(`‚úÖ Using existing class: 9¬∫ ano (${classId})`);
  }

  // 4. Create test student
  const { data: existingStudent } = await supabase
    .from('students')
    .select('id')
    .eq('phone_number', '+351999999999')
    .single();

  if (!existingStudent) {
    console.log('üë®‚Äçüéì Creating test student...');
    const { data: newStudent, error } = await supabase
      .from('students')
      .insert({
        name: 'Aluno Teste',
        phone_number: '+351999999999',
        email: 'aluno.teste@escola.edu',
        class_id: classId,
        school_id: schoolId,
        status: 'ativo'
      })
      .select('id')
      .single();
    
    if (error) {
      console.error('‚ùå Error creating student:', error);
    } else {
      console.log(`‚úÖ Test student created with ID: ${newStudent.id}`);
    }
  } else {
    console.log('‚úÖ Test student already exists');
  }

  console.log('\nüìö Inserting educational content...');
  
  // 5. Educational content
  const educationalContents = [
    {
      title: 'Equa√ß√µes do Segundo Grau - Teoria Completa',
      description: 'Material completo sobre equa√ß√µes quadr√°ticas para 9¬∫ ano',
      content_data: `EQUA√á√ïES DO SEGUNDO GRAU

DEFINI√á√ÉO:
Uma equa√ß√£o do segundo grau √© uma equa√ß√£o polinomial da forma ax¬≤ + bx + c = 0, onde:
- a, b e c s√£o n√∫meros reais
- a ‚â† 0 (coeficiente principal)
- x √© a inc√≥gnita

ELEMENTOS:
- a: coeficiente do termo quadr√°tico (x¬≤)
- b: coeficiente do termo linear (x)
- c: termo independente

EXEMPLOS:
1) x¬≤ - 5x + 6 = 0 (a=1, b=-5, c=6)
2) 2x¬≤ + 3x - 1 = 0 (a=2, b=3, c=-1)
3) x¬≤ - 9 = 0 (a=1, b=0, c=-9)

F√ìRMULA DE BHASKARA:
x = (-b ¬± ‚àö(b¬≤-4ac)) / 2a

DISCRIMINANTE (Œî):
Œî = b¬≤ - 4ac

AN√ÅLISE DO DISCRIMINANTE:
- Se Œî > 0: duas ra√≠zes reais e distintas
- Se Œî = 0: duas ra√≠zes reais e iguais
- Se Œî < 0: n√£o h√° ra√≠zes reais

EXEMPLO RESOLVIDO:
Resolver x¬≤ - 5x + 6 = 0

Identifica√ß√£o: a=1, b=-5, c=6
Discriminante: Œî = (-5)¬≤ - 4(1)(6) = 25 - 24 = 1
Como Œî > 0, temos duas ra√≠zes distintas.

Aplicando Bhaskara:
x = (5 ¬± ‚àö1) / 2 = (5 ¬± 1) / 2

x‚ÇÅ = (5 + 1) / 2 = 3
x‚ÇÇ = (5 - 1) / 2 = 2

Verifica√ß√£o: 3¬≤ - 5(3) + 6 = 9 - 15 + 6 = 0 ‚úì
            2¬≤ - 5(2) + 6 = 4 - 10 + 6 = 0 ‚úì

RELA√á√ïES DE VIETA:
Para uma equa√ß√£o ax¬≤ + bx + c = 0 com ra√≠zes x‚ÇÅ e x‚ÇÇ:
- Soma das ra√≠zes: x‚ÇÅ + x‚ÇÇ = -b/a
- Produto das ra√≠zes: x‚ÇÅ √ó x‚ÇÇ = c/a

EXERC√çCIOS:
1) Resolva: x¬≤ - 7x + 12 = 0
2) Resolva: 2x¬≤ - 8x + 6 = 0
3) Determine k para que x¬≤ - 4x + k = 0 tenha duas ra√≠zes iguais.`,
      content_type: 'pdf',
      subject_name: 'Matem√°tica'
    },
    {
      title: 'Figuras de Linguagem - Guia Completo',
      description: 'Estudo completo das principais figuras de linguagem para 9¬∫ ano',
      content_data: `FIGURAS DE LINGUAGEM

DEFINI√á√ÉO:
As figuras de linguagem s√£o recursos expressivos da l√≠ngua portuguesa que conferem maior beleza, expressividade e originalidade aos textos.

CLASSIFICA√á√ÉO:

1. FIGURAS DE PALAVRAS (SEM√ÇNTICAS)

MET√ÅFORA:
Compara√ß√£o impl√≠cita entre dois elementos.
Exemplo: "Seus olhos s√£o duas estrelas brilhantes."

COMPARA√á√ÉO (S√çMILE):
Compara√ß√£o expl√≠cita usando conectivos (como, tal qual, assim como).
Exemplo: "Ela √© linda como uma flor."

METON√çMIA:
Substitui√ß√£o de uma palavra por outra com rela√ß√£o de proximidade.
Tipos:
- Autor pela obra: "Li Machado de Assis" (li obras de Machado)
- Continente pelo conte√∫do: "Tomei um copo" (tomei o l√≠quido do copo)
- Causa pelo efeito: "Vive do seu trabalho" (vive do dinheiro ganho)

PERSONIFICA√á√ÉO (PROSOPOPEIA):
Atribui√ß√£o de caracter√≠sticas humanas a seres inanimados.
Exemplo: "O vento sussurrava entre as √°rvores."

HIP√âRBOLE:
Exagero intencional para dar √™nfase.
Exemplo: "Chorei rios de l√°grimas."

2. FIGURAS DE CONSTRU√á√ÉO (SINT√ÅTICAS)

ELIPSE:
Omiss√£o de termos facilmente identific√°veis.
Exemplo: "Na gaveta, apenas pap√©is velhos." (havia apenas)

ZEUGMA:
Omiss√£o de termo j√° mencionado anteriormente.
Exemplo: "Ele gosta de futebol; eu, de basquete." (gosto)

AN√ÅFORA:
Repeti√ß√£o da mesma palavra no in√≠cio de versos ou frases.
Exemplo: "Amor √© fogo que arde sem se ver;
         Amor √© ferida que d√≥i e n√£o se sente."

POLISS√çNDETO:
Repeti√ß√£o intencional de conjun√ß√µes.
Exemplo: "E ri, e grita, e pula de alegria."

3. FIGURAS DE PENSAMENTO

ANT√çTESE:
Aproxima√ß√£o de palavras ou express√µes de sentidos opostos.
Exemplo: "Era o melhor dos tempos, era o pior dos tempos."

PARADOXO (OX√çMORO):
Aparente contradi√ß√£o que revela uma verdade profunda.
Exemplo: "√â ferida que d√≥i e n√£o se sente."

IRONIA:
Express√£o do contr√°rio do que se pensa, com inten√ß√£o cr√≠tica.
Exemplo: "Que belo presente!" (referindo-se a algo ruim)

EUFEMISMO:
Suaviza√ß√£o de express√µes desagrad√°veis ou chocantes.
Exemplo: "Ele partiu desta para melhor." (morreu)

4. FIGURAS DE SOM

ALITERA√á√ÉO:
Repeti√ß√£o de sons consonantais.
Exemplo: "Tr√™s tristes tigres comiam trigo."

ASSON√ÇNCIA:
Repeti√ß√£o de sons voc√°licos.
Exemplo: "Sou Ana, da cama, da cana, vidrada, virgem."

ONOMATOPEIA:
Reprodu√ß√£o de sons ou ru√≠dos.
Exemplo: "O tic-tac do rel√≥gio."

EXERC√çCIOS DE IDENTIFICA√á√ÉO:
1. "A cidade √© um cora√ß√£o pulsante." - Que figura?
2. "O sil√™ncio falava mais que palavras." - Que figura?
3. "Li tr√™s Shakespeares hoje." - Que figura?
4. "Morreu de tanto viver." - Que figura?

DICAS PARA AN√ÅLISE:
- Observe o contexto da frase
- Identifique se h√° compara√ß√£o, exagero, repeti√ß√£o, etc.
- Considere o efeito expressivo pretendido pelo autor`,
      content_type: 'pdf',
      subject_name: 'Portugu√™s'
    },
    {
      title: 'Sistema Circulat√≥rio Humano',
      description: 'Estudo completo do sistema circulat√≥rio para ci√™ncias do 9¬∫ ano',
      content_data: `SISTEMA CIRCULAT√ìRIO HUMANO

FUN√á√ÉO PRINCIPAL:
O sistema circulat√≥rio √© respons√°vel pelo transporte de subst√¢ncias pelo corpo, incluindo:
- Oxig√™nio e nutrientes para as c√©lulas
- G√°s carb√¥nico e res√≠duos das c√©lulas
- Horm√¥nios e anticorpos

COMPONENTES PRINCIPAIS:

1. CORA√á√ÉO
√ìrg√£o muscular dividido em 4 cavidades:

√ÅTRIOS (c√¢maras superiores):
- √Åtrio direito: recebe sangue venoso do corpo
- √Åtrio esquerdo: recebe sangue arterial dos pulm√µes

VENTR√çCULOS (c√¢maras inferiores):
- Ventr√≠culo direito: bombeia sangue para os pulm√µes
- Ventr√≠culo esquerdo: bombeia sangue para o corpo

V√ÅLVULAS CARD√çACAS:
- Tric√∫spide: entre √°trio e ventr√≠culo direitos
- Mitral (bic√∫spide): entre √°trio e ventr√≠culo esquerdos
- Pulmonar: sa√≠da do ventr√≠culo direito
- A√≥rtica: sa√≠da do ventr√≠culo esquerdo

2. VASOS SANGU√çNEOS

ART√âRIAS:
- Levam sangue do cora√ß√£o para os √≥rg√£os
- Paredes espessas e el√°sticas
- Principais: aorta, pulmonares, car√≥tidas

VEIAS:
- Trazem sangue dos √≥rg√£os para o cora√ß√£o
- Paredes mais finas que as art√©rias
- Possuem v√°lvulas para evitar refluxo
- Principais: cavas, pulmonares, jugulares

CAPILARES:
- Vasos microsc√≥picos
- Permitem troca de subst√¢ncias entre sangue e c√©lulas
- Conectam art√©rias a veias

3. SANGUE
Tecido l√≠quido composto por:

PLASMA (55%):
- Parte l√≠quida
- Cont√©m √°gua, prote√≠nas, sais, glicose

ELEMENTOS FIGURADOS (45%):
- Hem√°cias (gl√≥bulos vermelhos): transportam oxig√™nio
- Leuc√≥citos (gl√≥bulos brancos): defesa do organismo
- Plaquetas: coagula√ß√£o sangu√≠nea

CIRCULA√á√ÉO SANGU√çNEA:

GRANDE CIRCULA√á√ÉO (sist√™mica):
Ventr√≠culo esquerdo ‚Üí Aorta ‚Üí Corpo ‚Üí Veias cavas ‚Üí √Åtrio direito

PEQUENA CIRCULA√á√ÉO (pulmonar):
Ventr√≠culo direito ‚Üí Art√©ria pulmonar ‚Üí Pulm√µes ‚Üí Veias pulmonares ‚Üí √Åtrio esquerdo

CARACTER√çSTICAS DO SANGUE:
- Sangue arterial: rico em oxig√™nio (vermelho vivo)
- Sangue venoso: rico em g√°s carb√¥nico (vermelho escuro)

BATIMENTOS CARD√çACAS:
- S√≠stole: contra√ß√£o (bombeamento)
- Di√°stole: relaxamento (enchimento)
- Frequ√™ncia normal: 60-100 bpm em repouso

DOEN√áAS COMUNS:
- Hipertens√£o: press√£o arterial elevada
- Infarto: morte de c√©lulas card√≠acas
- AVC: problema circulat√≥rio no c√©rebro
- Anemia: defici√™ncia de hem√°cias

CUIDADOS COM O SISTEMA CIRCULAT√ìRIO:
1. Exerc√≠cios f√≠sicos regulares
2. Alimenta√ß√£o equilibrada
3. N√£o fumar
4. Controlar o estresse
5. Manter peso adequado
6. Exames m√©dicos regulares

CURIOSIDADES:
- O cora√ß√£o bate cerca de 100.000 vezes por dia
- Temos aproximadamente 5 litros de sangue
- Os capilares, se esticados, dariam 2,5 voltas na Terra
- O sangue faz o percurso completo em cerca de 1 minuto`,
      content_type: 'pdf',
      subject_name: 'Ci√™ncias'
    }
  ];

  // Insert each content
  for (const content of educationalContents) {
    console.log(`\nüìö Inserting: ${content.title}`);
    
    // Check if content already exists
    const { data: existingContent } = await supabase
      .from('contents')
      .select('id')
      .eq('title', content.title)
      .single();

    if (existingContent) {
      console.log(`‚ö†Ô∏è Content "${content.title}" already exists, skipping...`);
      continue;
    }

    // Insert content
    const { data: insertedContent, error } = await supabase
      .from('contents')
      .insert({
        title: content.title,
        description: content.description,
        content_data: content.content_data,
        content_type: content.content_type,
        subject_id: subjectIds[content.subject_name],
        school_id: schoolId,
        status: 'publicado'
      })
      .select('id')
      .single();

    if (error) {
      console.error(`‚ùå Error inserting ${content.title}:`, error.message);
      continue;
    }

    console.log(`‚úÖ Content inserted with ID: ${insertedContent.id}`);

    // Associate with class if it exists
    if (classId && insertedContent.id) {
      const { error: classError } = await supabase
        .from('content_classes')
        .insert({
          content_id: insertedContent.id,
          class_id: classId
        });

      if (!classError) {
        console.log(`üîó Associated with class: 9¬∫ ano`);
      }
    }
  }

  console.log('\nüéâ All setup completed successfully!');
  console.log('\nüìã Next steps:');
  console.log('1. Run: node generate_embeddings.js');
  console.log('2. Go to http://localhost:8081');
  console.log('3. Navigate to Bot IA ‚Üí Testes');
  console.log('4. Test with phone: +351999999999');
}

// Run the script
setupBasicData().catch(console.error); 
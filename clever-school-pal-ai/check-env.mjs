import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

console.log('üîç VERIFICA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE');
console.log('='.repeat(50));

const envVars = [
  'VITE_SUPABASE_URL',
  'SUPABASE_SERVICE_ROLE_KEY',
  'AI_MODEL',
  'SUPABASE_URL',
  // ‚úÖ Novos para OpenRouter e sele√ß√£o de m√≠dia
  'OPENROUTER_API_KEY',
  'OPENROUTER_BASE_URL',
  'MEDIA_AI_MODEL',
  // Opcional: chave p√∫blica
  'VITE_SUPABASE_ANON_KEY'
];

envVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    console.log(`‚úÖ ${varName}: ${value.substring(0, 20)}...`);
  } else {
    console.log(`‚ùå ${varName}: NOT FOUND`);
  }
});

console.log('\nüîß CONFIGURA√á√ÉO NECESS√ÅRIA:');
console.log('AI_MODEL recomendado: meta-llama/llama-3.1-70b-instruct');
console.log('OPENROUTER_BASE_URL deve ser: https://openrouter.ai/api/v1');
console.log('Configure OPENROUTER_API_KEY e OPENROUTER_BASE_URL para IA');
console.log('Para sele√ß√£o de m√≠dia via IA, configure MEDIA_AI_MODEL (ex.: openai/gpt-5-mini ou Meta-Llama-3.1-405B-Instruct)');

// Verificar se h√° arquivo .env
import fs from 'fs';

const envFiles = ['.env', '.env.local', 'supabase/.env'];

console.log('\nüìÅ ARQUIVOS DE AMBIENTE DISPON√çVEIS:');
envFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
    const content = fs.readFileSync(file, 'utf8');
    if (content.includes('AI_MODEL')) {
      console.log(`   Cont√©m AI_MODEL: ${content.includes('Qwen3-32B') ? 'Qwen3-32B ‚úÖ' : 'Outro modelo ‚ö†Ô∏è'}`);
    } else {
      console.log('   N√£o cont√©m AI_MODEL ‚ùå');
    }
  } else {
    console.log(`‚ùå ${file} n√£o existe`);
  }
});
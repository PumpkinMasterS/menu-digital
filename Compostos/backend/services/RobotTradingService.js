const cron = require('node-cron');
const Investment = require('../models/Investment');
const Robot = require('../models/Robot');
const User = require('../models/User');
const Transaction = require('../models/Transaction');
const NotificationService = require('./NotificationService');

class RobotTradingService {
  constructor() {
    this.isRunning = false;
    this.init();
  }

  init() {
    // Agendar tarefa para calcular lucros di√°rios √†s 00:01
    cron.schedule('1 0 * * *', () => {
      console.log('üöÄ Iniciando c√°lculo autom√°tico de lucros dos rob√¥s...');
      this.calculateDailyProfits();
    });

    // Verificar investimentos completos a cada hora
    cron.schedule('0 * * * *', () => {
      this.checkCompletedInvestments();
    });

    console.log('ü§ñ Servi√ßo de Trading de Rob√¥s inicializado');
  }

  /**
   * Calcula e distribui lucros di√°rios de todos os investimentos ativos
   */
  async calculateDailyProfits() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è C√°lculo de lucros j√° em andamento...');
      return;
    }

    this.isRunning = true;
    
    try {
      console.log('üí∞ Calculando lucros di√°rios...');
      
      const activeInvestments = await Investment.find({ 
        status: 'active',
        endDate: { $gt: new Date() }
      }).populate('user robot');

      let totalProfits = 0;
      let processedCount = 0;

      for (const investment of activeInvestments) {
        try {
          const dailyProfit = investment.currentDailyProfit;
          
          if (dailyProfit > 0) {
            // Adicionar lucro ao investimento
            await investment.addDailyProfit();
            
            // Atualizar saldo do usu√°rio
            await User.findByIdAndUpdate(
              investment.user._id,
              { $inc: { balance: dailyProfit } }
            );

            // Criar transa√ß√£o de lucro
            const profitTransaction = new Transaction({
              user: investment.user._id,
              type: 'earning',
              amount: dailyProfit,
              description: `Lucro di√°rio - ${investment.robot.name}`,
              status: 'completed',
              reference: `profit-${investment._id}-${new Date().toISOString().split('T')[0]}`
            });
            await profitTransaction.save();

            // Notificar usu√°rio
            await NotificationService.createProfitNotification(
              investment.user._id,
              investment.robot.name,
              dailyProfit,
              investment._id
            );

            totalProfits += dailyProfit;
            processedCount++;

            console.log(`‚úÖ Lucro de ‚Ç¨${dailyProfit.toFixed(2)} para ${investment.user.name}`);
          }
        } catch (error) {
          console.error(`‚ùå Erro ao processar lucro para investimento ${investment._id}:`, error);
        }
      }

      console.log(`üéØ Lucros processados: ${processedCount} investimentos, ‚Ç¨${totalProfits.toFixed(2)} distribu√≠dos`);

    } catch (error) {
      console.error('‚ùå Erro no c√°lculo de lucros:', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Verifica e finaliza investimentos completos
   */
  async checkCompletedInvestments() {
    try {
      console.log('üîç Verificando investimentos completos...');
      
      const completedInvestments = await Investment.find({
        status: 'active',
        endDate: { $lte: new Date() }
      }).populate('user robot');

      for (const investment of completedInvestments) {
        try {
          // Finalizar investimento
          investment.status = 'completed';
          await investment.save();

          // Devolver capital inicial para o usu√°rio
          await User.findByIdAndUpdate(
            investment.user._id,
            { $inc: { balance: investment.amount } }
          );

          // Criar transa√ß√£o de devolu√ß√£o do capital
          const capitalReturnTransaction = new Transaction({
            user: investment.user._id,
            type: 'earning',
            amount: investment.amount,
            description: `Devolu√ß√£o de capital - ${investment.robot.name}`,
            status: 'completed',
            reference: `capital-return-${investment._id}`
          });
          await capitalReturnTransaction.save();

          // Notificar usu√°rio
          await NotificationService.createInvestmentCompletedNotification(
            investment.user._id,
            investment.robot.name,
            investment.amount,
            investment.totalProfit,
            investment._id
          );

          console.log(`‚úÖ Investimento ${investment._id} finalizado. Capital devolvido: ‚Ç¨${investment.amount.toFixed(2)}`);

        } catch (error) {
          console.error(`‚ùå Erro ao finalizar investimento ${investment._id}:`, error);
        }
      }

      console.log(`üìä ${completedInvestments.length} investimentos finalizados`);

    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o de investimentos completos:', error);
    }
  }

  /**
   * Simula flutua√ß√µes de mercado para rob√¥s (para demonstra√ß√£o)
   */
  async simulateMarketFluctuations() {
    try {
      const activeRobots = await Robot.find({ status: 'active' });
      
      for (const robot of activeRobots) {
        // Simular pequena varia√ß√£o no lucro di√°rio (¬±0.5%)
        const fluctuation = (Math.random() - 0.5) * 0.5;
        const newDailyProfit = Math.max(0.1, Math.min(10, robot.dailyProfit + fluctuation));
        
        if (Math.abs(newDailyProfit - robot.dailyProfit) > 0.1) {
          robot.dailyProfit = parseFloat(newDailyProfit.toFixed(2));
          await robot.save();
          
          console.log(`üìà Rob√¥ ${robot.name}: ${robot.dailyProfit}% di√°rio (${fluctuation > 0 ? '‚Üë' : '‚Üì'} ${Math.abs(fluctuation).toFixed(2)}%)`);
        }
      }

    } catch (error) {
      console.error('‚ùå Erro na simula√ß√£o de mercado:', error);
    }
  }

  /**
   * Obt√©m estat√≠sticas em tempo real do sistema
   */
  async getLiveStats() {
    try {
      const stats = await Investment.aggregate([
        { $match: { status: 'active' } },
        {
          $group: {
            _id: null,
            totalActiveInvestments: { $sum: 1 },
            totalInvested: { $sum: '$amount' },
            totalDailyProfit: { $sum: { $multiply: ['$amount', { $divide: ['$dailyProfit', 100] }] } },
            totalProfitGenerated: { $sum: '$totalProfit' },
            uniqueInvestors: { $addToSet: '$user' }
          }
        }
      ]);

      const robotStats = await Robot.aggregate([
        { $match: { status: 'active' } },
        {
          $group: {
            _id: null,
            totalRobots: { $sum: 1 },
            averageDailyProfit: { $avg: '$dailyProfit' },
            minDailyProfit: { $min: '$dailyProfit' },
            maxDailyProfit: { $max: '$dailyProfit' }
          }
        }
      ]);

      return {
        investments: stats[0] || {
          totalActiveInvestments: 0,
          totalInvested: 0,
          totalDailyProfit: 0,
          totalProfitGenerated: 0,
          uniqueInvestors: 0
        },
        robots: robotStats[0] || {
          totalRobots: 0,
          averageDailyProfit: 0,
          minDailyProfit: 0,
          maxDailyProfit: 0
        },
        timestamp: new Date()
      };

    } catch (error) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
      throw error;
    }
  }

  /**
   * For√ßa o c√°lculo de lucros (para testes)
   */
  async forceProfitCalculation() {
    console.log('‚ö° For√ßando c√°lculo de lucros...');
    await this.calculateDailyProfits();
  }
}

module.exports = new RobotTradingService();
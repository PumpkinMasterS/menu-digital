const cron = require('node-cron');
const CryptoTransferService = require('../services/CryptoTransferService');

class CryptoTransferJob {
  constructor() {
    this.isRunning = false;
    this.cryptoTransferService = new CryptoTransferService();
  }

  /**
   * Inicia os jobs agendados para transfer√™ncias de cripto
   */
  start() {
    // Verificar transfer√™ncias pendentes a cada 5 minutos
    cron.schedule('*/5 * * * *', async () => {
      if (this.isRunning) {
        console.log('‚ö†Ô∏è Verifica√ß√£o de transfer√™ncias pendentes j√° em andamento, ignorando...');
        return;
      }

      await this.checkPendingTransfers();
    });

    // Calcular retornos di√°rios a cada 24 horas (√† meia-noite)
    cron.schedule('0 0 * * *', async () => {
      if (this.isRunning) {
        console.log('‚ö†Ô∏è C√°lculo de retornos di√°rios j√° em andamento, ignorando...');
        return;
      }

      await this.calculateDailyReturns();
    });

    console.log('‚úÖ Jobs de transfer√™ncias de cripto iniciados:');
    console.log('   - Verifica√ß√£o de transfer√™ncias pendentes: a cada 5 minutos');
    console.log('   - C√°lculo de retornos di√°rios: todos os dias √† meia-noite');
  }

  /**
   * Verificar transfer√™ncias pendentes
   */
  async checkPendingTransfers() {
    this.isRunning = true;

    try {
      console.log('üîç Verificando transfer√™ncias pendentes...');
      
      const results = await this.cryptoTransferService.checkPendingInvestmentTransfers();
      
      if (results.length > 0) {
        console.log(`‚úÖ ${results.length} transfer√™ncias confirmadas e processadas`);
        
        // Enviar notifica√ß√µes para os usu√°rios
        for (const result of results) {
          console.log(`üìß Investimento ${result.investmentId} confirmado para o usu√°rio ${result.transactionId}`);
        }
      } else {
        console.log('‚ÑπÔ∏è Nenhuma transfer√™ncia pendente foi confirmada nesta verifica√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar transfer√™ncias pendentes:', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Calcular retornos di√°rios
   */
  async calculateDailyReturns() {
    this.isRunning = true;

    try {
      console.log('üí∞ Calculando retornos di√°rios...');
      
      const results = await this.cryptoTransferService.calculateDailyReturns();
      
      if (results.length > 0) {
        const totalReturns = results.reduce((sum, result) => sum + result.dailyProfit, 0);
        console.log(`‚úÖ ${results.length} retornos calculados, total: ${totalReturns.toFixed(2)}`);
        
        // Estat√≠sticas dos retornos
        const stats = {
          totalInvestments: results.length,
          totalReturns: totalReturns,
          averageReturn: totalReturns / results.length,
          maxReturn: Math.max(...results.map(r => r.dailyProfit)),
          minReturn: Math.min(...results.map(r => r.dailyProfit))
        };
        
        console.log('üìä Estat√≠sticas dos retornos di√°rios:', stats);
      } else {
        console.log('‚ÑπÔ∏è Nenhum retorno di√°rio para calcular');
      }
    } catch (error) {
      console.error('‚ùå Erro ao calcular retornos di√°rios:', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * For√ßa a verifica√ß√£o manual de transfer√™ncias pendentes
   */
  async forceCheckPendingTransfers() {
    if (this.isRunning) {
      throw new Error('Verifica√ß√£o j√° em andamento');
    }

    await this.checkPendingTransfers();
  }

  /**
   * For√ßa o c√°lculo manual de retornos di√°rios
   */
  async forceCalculateDailyReturns() {
    if (this.isRunning) {
      throw new Error('C√°lculo de retornos j√° em andamento');
    }

    await this.calculateDailyReturns();
  }

  /**
   * Obt√©m status dos jobs
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      nextPendingCheck: this.getNextRunTime('*/5 * * * *'),
      nextDailyReturn: this.getNextRunTime('0 0 * * *')
    };
  }

  /**
   * Calcula pr√≥ximo hor√°rio de execu√ß√£o
   */
  getNextRunTime(cronExpression) {
    try {
      // Implementa√ß√£o simplificada para obter pr√≥ximo hor√°rio
      const now = new Date();
      const nextRun = new Date(now.getTime() + 5 * 60 * 1000); // Pr√≥xima execu√ß√£o em 5 minutos
      return nextRun;
    } catch (error) {
      return null;
    }
  }
}

module.exports = CryptoTransferJob;


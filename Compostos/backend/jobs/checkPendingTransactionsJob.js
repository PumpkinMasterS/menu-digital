const cron = require('node-cron');
const BEP20Service = require('../services/BEP20Service');

class CheckPendingTransactionsJob {
  constructor() {
    this.isRunning = false;
    this.bep20Service = new BEP20Service();
  }

  /**
   * Inicia o job para verificar transa√ß√µes pendentes
   */
  start() {
    // Executar a cada 5 minutos
    cron.schedule('*/5 * * * *', async () => {
      if (this.isRunning) {
        console.log('‚ö†Ô∏è Verifica√ß√£o de transa√ß√µes pendentes j√° em andamento, ignorando...');
        return;
      }

      await this.checkPendingTransactions();
    });

    console.log('‚úÖ Job de verifica√ß√£o de transa√ß√µes pendentes iniciado (executa a cada 5 minutos)');
  }

  /**
   * Verifica transa√ß√µes pendentes
   */
  async checkPendingTransactions() {
    this.isRunning = true;

    try {
      console.log('üîç Verificando transa√ß√µes pendentes...');
      
      const results = await this.bep20Service.checkPendingTransactions();
      
      if (results.length > 0) {
        console.log(`‚úÖ ${results.length} transa√ß√µes foram confirmadas e processadas`);
        
        // Enviar notifica√ß√µes para os usu√°rios
        for (const result of results) {
          // Aqui voc√™ poderia implementar notifica√ß√µes por email, push, etc.
          console.log(`üìß Notifica√ß√£o enviada para o usu√°rio da transa√ß√£o ${result.transactionId}`);
        }
      } else {
        console.log('‚ÑπÔ∏è Nenhuma transa√ß√£o pendente foi confirmada nesta verifica√ß√£o');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar transa√ß√µes pendentes:', error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * For√ßa a verifica√ß√£o manual de transa√ß√µes pendentes
   */
  async forceCheck() {
    if (this.isRunning) {
      throw new Error('Verifica√ß√£o j√° em andamento');
    }

    await this.checkPendingTransactions();
  }
}

module.exports = CheckPendingTransactionsJob;

